/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package edu.washington.sig.gleen.javacc.grammar;

public @SuppressWarnings("all") class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected PathExpression parser;
  
  // added fields
  private String operator = null;
  private int operatorType;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(PathExpression p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return PathExpressionTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
  SimpleNode n = (SimpleNode)children[i];
  if (n != null) {
    n.dump(prefix + " ");
  }
      }
    }
  }

	/**
	 * @return the operator
	 */
	public String getOperator()
	{
		return operator;
	}
	
	/**
	 * @param operator the operator to set
	 */
	public void setOperator(String operator)
	{
		this.operator = operator;
	}
	
	/**
	 * @return the operatorType
	 */
	public int getOperatorType()
	{
		return operatorType;
	}
	
	/**
	 * @param operatorType the operatorType to set
	 */
	public void setOperatorType(int operatorType)
	{
		this.operatorType = operatorType;
	}
}

